import 'dart:math';

import '../extensions/int.dart';
import 'replacement.dart';

enum KeyFormats {
  hex("0123456789ABCDEF"),
  numbers("0123456789"),
  capitalChars("QWERTYUIOPASDFGHJKLZXCVBNM"),
  smallChars("qwertyuiopasdfghjklzxcvbn"),
  specialChars("!@%^&*()_+~`-={}|';:?.,<>"),
  alphabets(
    "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    "abcdefghijklmnopqrstuvwxyz",
  ),
  alphabetsAndNumbers(
    "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    "abcdefghijklmnopqrstuvwxyz"
    "0123456789",
  ),
  alphabetsAndSpecialChars(
    "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    "abcdefghijklmnopqrstuvwxyz"
    "!@%^&*()_+~`-={}|';:?.,<>",
  ),
  capitalCharsAndNumbers(
    "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    "0123456789",
  ),
  smallCharsAndNumbers(
    "abcdefghijklmnopqrstuvwxyz"
    "0123456789",
  ),
  all(
    "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    "abcdefghijklmnopqrstuvwxyz"
    "!@%^&*()_+~`-={}|';:?.,<>"
    "0123456789",
  );

  final String value;

  const KeyFormats(this.value);
}

class KeyGenerator {
  const KeyGenerator._();

  static String get uniqueKey => randomKey();

  /// Generates a unique image key based on the current date and time.
  ///
  /// Example:
  /// ```dart
  /// String imageKey = KeyGenerator.dateKey;
  /// print(imageKey); // Output: Current date and time formatted as 'yyyyMMddHHmmss'.
  /// ```
  static String get dateKey {
    final a = DateTime.now();
    return "${a.year.x4D}${a.month.x2D}${a.day.x2D}${a.hour.x2D}${a.minute.x2D}${a.second.x2D}";
  }

  /// Generates a key based on the provided name or the current timestamp.
  ///
  /// Parameters:
  /// - [name]: The name to generate a key from. If provided, the key is generated by converting the name to lowercase.
  /// - [timeMills]: The timestamp to generate a key from. If not provided, the current timestamp is used.
  /// - [extraKeySize]: The size of the extra key to append. Default is 5.
  ///
  /// Example:
  /// ```dart
  /// String key = KeyGenerator.generateKey(name: 'MyImage');
  /// print(key); // Output: 'myimage'
  ///
  /// String timestampKey = KeyGenerator.generateKey(timeMills: 1644613725000);
  /// print(timestampKey); // Output: '1644613725000xxxxx' (xxxxx is a random string of 5 characters)
  /// ```
  static String generateKey({
    String? name,
    int? timeMills,
    int extraKeySize = 5,
    KeyFormats format = KeyFormats.numbers,
  }) {
    if (name != null) {
      return Replacement.auto(name).toLowerCase();
    } else {
      final ms = timeMills ?? DateTime.timestamp().millisecondsSinceEpoch;
      final extra = randomKey(length: extraKeySize, chars: format.value);
      final key = "$ms$extra";
      return key;
    }
  }

  static String randomKey({
    int length = 6,
    String? chars,
    List<String> ignores = const [],
    KeyFormats format = KeyFormats.alphabetsAndNumbers,
  }) {
    String c = chars ?? format.value;
    Random r = Random.secure();
    String code = List.generate(length, (i) => c[r.nextInt(c.length)]).join();
    if (ignores.isNotEmpty && ignores.contains(code)) {
      return randomKey(length: length, ignores: ignores);
    }
    return code;
  }

  static BigInt countPossibleWords(int length, String chars) {
    int charsetSize = chars.length;
    int maxLength = length;
    BigInt base = BigInt.from(charsetSize);
    BigInt numerator = base.pow(maxLength + 1) - base;
    BigInt denominator = BigInt.from(charsetSize - 1);
    BigInt total = numerator ~/ denominator;
    return total;
  }
}
